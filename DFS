#include <iostream>
#include <vector>
#include <stack>

using namespace std;

class Graph {
    int V; // Number of vertices
    vector<vector<int>> adj; // Adjacency list

public:
    Graph(int V) : V(V) {
        adj.resize(V);
    }

    // Function to add an edge to the graph
    void addEdge(int v, int w) {
        adj[v].push_back(w); // Add w to vâ€™s list
    }

    // Depth First Search traversal from a given source vertex
    void DFS(int s) {
        vector<bool> visited(V, false); // Mark all vertices as not visited
        stack<int> stack; // Create a stack for DFS

        // Push the current source node
        stack.push(s);

        while (!stack.empty()) {
            // Pop a vertex from stack and print it
            s = stack.top();
            stack.pop();

            // Stack may contain same vertex twice.
            // So, we need to check if the popped vertex is already visited before processing it.
            if (!visited[s]) {
                cout << s << " ";
                visited[s] = true; // Mark the current vertex as visited

                // Get all adjacent vertices of the popped vertex s
                // If an adjacent has not been visited, then push it to the stack
                for (auto it = adj[s].begin(); it != adj[s].end(); ++it) {
                    if (!visited[*it]) {
                        stack.push(*it);
                    }
                }
            }
        }
    }
};

int main() {
    // Create a graph given in the above diagram
    Graph g(5);
    g.addEdge(0, 1);
    g.addEdge(0, 2);
    g.addEdge(1, 3);
    g.addEdge(2, 4);
    g.addEdge(3, 4);

    cout << "Depth First Traversal (starting from vertex 0): ";
    g.DFS(0);

    return 0;
}

